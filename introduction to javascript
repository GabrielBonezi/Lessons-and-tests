The following is my annotations from the course "introduction to javascript" from Codecademy. Visiting their site and checking the course is advised.
It's free... for now :)

--
Lesson 1
--
function console.log(xxx)

The function allows the user to display an information. If I want the code to say "hello", I simply write

console.log('hello');

Then the response will be

hello
--
Sometimes it's important to leave some notes, not only for yourself in the future, but for other programmers to understand better the roles of that specific line or function.
To do that, you can simply use "//" or "/*" and "*/". For example:

// Bellow the code says the name of the owner
console.log ('Gabriel');
/* Above the code says the name of the owner */

The format /* and */ can also be used to comment multiples lines, like so:

/* Bellow the code says the name of the owner
console.log ('Gabriel');
console.log ('Bonezi');
*/
It's important to note that comments are an efficient way to  block some part of the code from running. As done above, the code would simply not say anything, because all of it is in comment format.

--

Now we are going to differenciate the types of data.

-Numbers: Any number, 0, 1, 2, 500... including decimals, 0.15, 100.99...
-Strings: Grouping of character (letters, symbols, numbers, spaces, whatever character, including numbers) but here they are surrounded by quotes, single ', or double ".
Example of string: "Gabriel is the name of the original owner of this code"
-Boolean: a simple switch, the value is "true" or "false", on and off or the answer to a "yes" or "no" question.
-Null: determined by the word "null", it's the intentional absence of a determined value.
-Undefined: determined by the word "undefined", it's the same as null, but it means a given value that doesn't exist.
-Symbol: a new feature to the language. A unique indentifier.
-Object: collection of related data.

Input:
console.log('JavaScript');
console.log(2011);
console.log('Woohoo! I love to code! #codecademy');
console.log(20.49);

Output:
JavaScript
2011
Woohoo! I love to code! #codecademy
20.49
--

Operator is a character that does something, performs a task in the code. Javascript has some arithmethic operators that allows the user to perform calculations with numbers.

using the following, you can:

+ add;
- subtract;
* multiply;
/ divide;
% get the remainder of the division between both numbers.

input:
console.log(5+3);
console.log(5-3);
console.log(5*3);
console.log(5/3);
console.log(5%3);

output:
8
2
15
1.6666666666666667
2

note that the symbol % represents the remainder of the division between 5 and 3, where 3 can go 1 time on 5 and it remains 2, witch is the output of the code.
inputting console.log(5%5); the output will be 0, because there's no remainder.
--

Although operator can be used with numbers and arithmethics calculations, they can also be used with strings.
Adding two strings togheter can be also called concatenation.

Note that the computer will write exacly the strings, so, if you want a space between the strings, or a comma, or anything like that, you need to be precise in the string to get the result you want.

console.log('Hello'+ 'World'); //Prints HelloWorld
console.log('Hello '+'World'); //Prints Hello World
console.log('Hello'+' '+'World');// Hello World
--

Every piece of data in the code has specific properties. As an exemple, each string in the code has the property length, wich reveals how many characters are in that specific string.
You can have that information by appending the string with a period and the property name.

console.log('Hello'.length); // Prints 5

It is important to write the name of the property correctly, for example, if you write lenght, instead of length it will not work.

console.log('Hello'.length); //Prints 5
console.log('Teaching the world how to code'.length); //Prints 30
--
Methods are actions that we can demand the code to do for us.

If we need to put a string in the UPPER CASE, for example, the method .toUpperCase() can be used.

Note that the . pulls the action of the method to the object right before it.
In the very example of console.log, you are logging something in the console, being log the action, . the middleman, and console the object that will suffer the action.

The methods can also be used to check if the action is true or false, revealing a boolean, for example:

console.log('Hello'.startsWith('H')); //Prints true

There's a number of methods that can be used, they can be found in the JavaScript String Documentation.

One of them is the method .trim(), that can be used to remove the white spaces on the strings, as shown bellow

console.log('    Removing the white spaces    '.trim()); // prints Removing the white spaces

please note that this method will remove the white spaces before and after the string. If you leave the spaces in between the words, they will be printed:

console.log('    Removing the     white spaces   '.trim()); // prints Removing the     white spaces
--

Besides the console, JavaScript has other objects built into it.

An exemple is the Math object, wich can be used to do more complex mathematical operations than the arithmetic ones.

From the built-in object Math, we can use the method .random(). This method returs a random number between 0 (inclusive) and 1 (exclusive). With this method you can escale to any range
Just multiply by the number you want.

console.log(Math.random()); // Prints a random number between 0 and 1 (but not 1) ex. 0.42044008985036974
console.log(Math.random()*50); // Prints a random number between 0 and 50 (but not 50) ex. 32.624706578864725

Where the results will probably be a decimal number, there's another method that can ensure that the result will be a whole number.
Math.floor() takes the decimal numbers and rounds it down to the nearest whole number.

console.log(Math.floor(Math.random()*50)); //prints a whole number between 0 and 50, ex. 49

console.log(Math.random()); //Prints random number between 0 and 1.
console.log(Math.random()*50); // random number 0-50
console.log(Math.floor(Math.random()*50)); // random integer number 0-50
console.log(Math.floor(Math.random()*100)); //integer number 0-100, ex. 52
console.log(Math.ceil(43.8)); //prints smallest integer greater than or equal to a decimal number, in this case, 44
console.log(Number.isInteger(2017)); // prints true

--
End of Lesson 1
--

--
Lesson 2
--

Declaring variables

In the version ES6 of JavaScript, in 2015, two keywords were introduced in the language: let and const

Those are used to create and declare variables. Prior to that version, programmers would use the keyword var to declare them.

var myName = 'Gabriel';
console.log(myName); //prints Gabriel

It's important to note the variable name. The capitalization in the variables are done in camel casing. Camel casing consists in writing the first word in lowercase and the following words with the initial letter in uppercase, as shown:

var camelCasingEverythingForever = 'true'

Also, it's important to note that variable names are case sensitive. That means that if there are two variables with the same name, but different words in uppercase or lowercase, they are different variables.

var myNameIsGabriel = 'Gabriel'
var mynameIsGabriel = 'not Gabriel'
console.log (myNameIsGabriel); // Output: Gabriel
console.log (mynameIsGabriel); // Output: GABRIEL

That said, it's a bad practice having two variables with the same name but different casings.

console.log("declaring variables"); //Prints declaring variables
var favoriteFood = "pizza"; // declares that the variable favoriteFood is equal to 'pizza'
var numOfSlices = 8; // declares that the variable numOfSlices is equal to 8
console.log(favoriteFood); // prints pizza
console.log("A pizza has " + numOfSlices + " slices"); // prints A pizza has 8 slices

--

variable let

This variable can have its value reassigned in the middle of the code, as follows:

let bottleColor = 'blue'
console.log(bottleColor); // returns blue
let bottleColor = 'green';
console.log(bottleColor); // returns green

On the other way, the variable can simply not have a value assigned (including var as well). Then the value returned will be 'undefined' as shown:

let price;
console.log (price); //output: undefined
price = 250
console.log(price); //output: 250

let changeMe = true;
console.log(changeMe); //prints true
changeMe = false;
console.log(changeMe); // prints false

--
variable const

It's the short fot constant. Used to store any value.
Follows the same structure as var and let.

const myName = 'Gabriel'
console.log (myName); // Prints Gabriel

const cannot be reassigned because its a constant. Trying to reassign it will return a TypeError

const myName = 'Gabriel';
console.log(myName);
myName = 'Bonezi';
console.log(myName);

That returns an error.

const myName = 'Gabriel';
console.log(myName);
/* myName = 'Bonezi';
console.log(myName);*/

That returns Gabriel, because the reassigning was commented off.

The const variable needs to be assigned as soon as it's created, otherwise a SyntaxError will occur.

const myName;
myName = 'Gabriel' //doesn't work, because it needs to be assigned above.

--

Mathematical Assignment Operators

let w = 3;
w = w + 1;
console.log(w); // output: 4

There's a change of value of the variable w, changing it from 3 to 4.

Another way of doing the same thing is by writing

let w = 3;
w += 1;
console.log (w); // output: 4

using the += assignment operator, we can reassign the value of w, performing a mathematical operation of the first operator + using the number in the right, then reassigning the variable w to the computed value.

the same can be done with the other mathematical operators: -=; *=; /=.

lex x = 20;
x -= 5; // can be written x = x -5
console.log (x); // output: 15

let y = 50;
y *= 2; // can be written as y = y * 2
console.log (y); // output: 100

let z = 8;
z /= 2; // cam be written as z = z / 2
console.log (z); // output: 4

---------------------
let levelUp = 10;
let powerLevel = 9001;
let multiplyMe = 32;
let quarterMe = 1152;

// Use the mathematical assignments in the space below:
levelUp += 5;
powerLevel -= 100;
multiplyMe *= 11;
quarterMe /= 4;

console.log('The value of levelUp:', levelUp); 
console.log('The value of powerLevel:', powerLevel); 
console.log('The value of multiplyMe:', multiplyMe); 
console.log('The value of quarterMe:', quarterMe);


Output: 
The value of levelUp: 15
The value of powerLevel: 8901
The value of multiplyMe: 352
The value of quarterMe: 288
---------------------------------------

Increment and Decrement operators

increment: ++
decrement: --

they will increase or decrease the value of the variable by 1.

let a = 10;
a++;
console.log(a); // output: 11

let b = 20;
b--;
console.log(b); // output: 19

once incremented or decremented, the variable has its value reassigned, just as in the other mathematical operators.

let gainedDollar = 3;
let lostDollar = 50;
gainedDollar++;
lostDollar--;
console.log(gainedDollar); // output: 4
console.log(lostDollar); // output: 49

--

String concatenation with variables

the + operator can be used to combine two string values 

let myPet = 'armadillo';
console.log('I own a pet ' + myPet + '.') // output: I own a pet armadillo.

--

String Interpolation

in the ES6 version of JavaScript, we can interpolate variables into strings using template literals, as shown:

const myPet = 'armadillo';
console.log(`I own a pet ${myPet}.`); // output: I own a pet armadillo.

One of the biggest benefits to using template literals is the readability of the code. That way you can more easily tell what the new string will be.
Also you dont need to worry about escaping double or single quotes.

let myName = 'Gabriel Bonezi';
let myCity = 'Stockholm';
console.log(myName);
console.log(myCity);

console.log(`My name is ${myName}. My favorite city is ${myCity}. `); // output My name is Gabriel Bonezi. My favorite city is Stockholm

--

typeof Operator

used to check the data type of a variable's value

const unknown1 = 'foo';
console.log(typeof unknown1); // output: string

const unknown2 = 10;
console.log(typeof unknown2); // output: number

const unknown3 = true;
console.log(typeof unknown3); // output: boolean

let newVariable = 'Playing around with typeof.';
console.log(typeof newVariable); // output: string
newVariable = 1;
console.log(typeof newVariable); // output: number

--
End of lesson 2
--
Lesson 3
--

Conditional Statements

Used to check specific conditions and perform tasks based on that info.
--
If statement

if (true) {
console.log('This message will print!');
}
// output : This message will print!

The example is composed of:
1. the if keyword followed by a set of parentheses (), followed by a code block or block statement, indicated by a set of curly braces {};
2. inside the parentheses a condition is provided that evalues to a boolean, true or false;
3. if the condition evalues to true, the code inside the curly braces executes;
4. if the condition evalues to false, the block will not execute.

--
Else statement

In the event that the boolean in the if condition evalues to false, we can assign a default behavior to the condition by using the statement else to run another block of code.

if (false) {
console.log('The code in this block will not run.');
} else {
console.log('But the code in this block will"');
}
// output: But the code in this block will!

An else statement must be paired with an if statement, together they are referred to as an if...else statement.
if...else statements allow us to automate solutions to yes or no questions, aka binary decisions.


let sale = true;
sale = false;

if(sale) {
  console.log('Time to buy!');
} else {
  console.log('Time to wait for a sale.');
}
//prints Time to wait for a sale.

--
Comparison Operators

When writing conditional statements, often different types of operators are needed in order to compare the value of the variables.

the comparison operators are:

1. < less than;
2. > greater than;
3. <= less than or equal to;
4. >= greater than or equal to;
5. === is equal to; (considers data type)
6. == is equal to; (does not consider data type)
7. != is not equal to; (doesnt consider data type)
8. !=== is not equal to (considers data type)

those operators compare the value on the left with the one on the right:

10 < 12 // evaluates to true
console.log (3>5) //prints false

they can also be used to compare different data types like strings:

'apples' === 'bananas' //false
'apples' !== 'bananas' //true
1 == 1 // true
'1' == 1 //true, a string and a number, but they have the same value
'1' === 1 //false, a string and a number
'1' !== 1 // true
'1' != 1 //false, they have the same value, so they are 'equal' when there's only one '='


